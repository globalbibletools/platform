diff --git a/node_modules/next/dist/server/base-server.js b/node_modules/next/dist/server/base-server.js
index 2aed864..cd64442 100644
--- a/node_modules/next/dist/server/base-server.js
+++ b/node_modules/next/dist/server/base-server.js
@@ -82,6 +82,40 @@ const _prefetchrsc = require("./future/normalizers/request/prefetch-rsc");
 const _nextdata = require("./future/normalizers/request/next-data");
 const _serveractionrequestmeta = require("./lib/server-action-request-meta");
 const _interceptionroutes = require("./future/helpers/interception-routes");
+
+const os = require('os');
+const { trace } = require("@opentelemetry/api");
+const pino = require("pino");
+
+const httpLogger = pino({
+  level: process.env.LOG_LEVEL ?? "info",
+  formatters: {
+    level: (label) => ({ level: label }),
+  },
+  base:
+    process.env.NODE_ENV === "production" ?
+      {
+        service: "platform-server",
+        pid: process.pid,
+        hostname: os.hostname(),
+      }
+    : undefined,
+  timestamp: pino.stdTimeFunctions.isoTime,
+  mixin:
+    process.env.NODE_ENV === "production" ?
+      () => {
+        const span = trace.getActiveSpan();
+        if (!span) return {};
+
+        const context = span.spanContext();
+        return {
+          spanId: context.spanId,
+          traceId: context.traceId,
+        };
+      }
+    : undefined
+});
+
 function _interop_require_default(obj) {
     return obj && obj.__esModule ? obj : {
         default: obj
@@ -429,6 +463,8 @@ class Server {
         _log.error(err);
     }
     async handleRequest(req, res, parsedUrl) {
+        const start = performance.now()
+
         await this.prepare();
         const method = req.method.toUpperCase();
         const rsc = isRSCRequestCheck(req) ? "RSC " : "";
@@ -443,6 +479,15 @@ class Server {
                     "next.rsc": Boolean(rsc)
                 }
             }, async (span)=>this.handleRequestImpl(req, res, parsedUrl).finally(()=>{
+                   const responseTime = Math.round(performance.now() - start)
+                   httpLogger.info({
+                       method: req.originalRequest.method,
+                       url: req.originalRequest.url,
+                       ip: req.originalRequest.headers['x-forwarded-for']?.split(',').shift() || req.originalRequest.connection?.remoteAddress,
+                       statusCode: res.originalResponse.statusCode,
+                       responseTime
+                   })
+
                     if (!span) return;
                     span.setAttributes({
                         "http.status_code": res.statusCode
