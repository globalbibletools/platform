/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export enum EmailStatus {
  Bounced = "BOUNCED",
  Complained = "COMPLAINED",
  Unverified = "UNVERIFIED",
  Verified = "VERIFIED",
}

export enum GlossSource {
  Import = "IMPORT",
  User = "USER",
}

export enum GlossState {
  Approved = "APPROVED",
  Unapproved = "UNAPPROVED",
}

export enum JobStatus {
  Complete = "complete",
  Error = "error",
  InProgress = "in-progress",
  Pending = "pending",
}

export enum LanguageRole {
  Admin = "ADMIN",
  Translator = "TRANSLATOR",
  Viewer = "VIEWER",
}

export enum ResourceCode {
  Bdb = "BDB",
  Lsj = "LSJ",
  Strongs = "STRONGS",
}

export enum SystemRole {
  Admin = "ADMIN",
}

export enum TextDirection {
  Ltr = "ltr",
  Rtl = "rtl",
}

export enum UserStatus {
  Active = "active",
  Disabled = "disabled",
}

export type Generated<T> =
  T extends ColumnType<infer S, infer I, infer U> ?
    ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Int8 = ColumnType<
  string,
  bigint | number | string,
  bigint | number | string
>;

export type Json = JsonValue;

export type JsonArray = JsonValue[];

export type JsonObject = {
  [x: string]: JsonValue | undefined;
};

export type JsonPrimitive = boolean | number | string | null;

export type JsonValue = JsonArray | JsonObject | JsonPrimitive;

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export interface Book {
  id: number;
  name: string;
}

export interface CronJob {
  active: Generated<boolean>;
  command: string;
  database: Generated<string>;
  jobid: Generated<Int8>;
  jobname: string | null;
  nodename: Generated<string>;
  nodeport: Generated<number>;
  schedule: string;
  username: Generated<string>;
}

export interface CronJobRunDetail {
  command: string | null;
  database: string | null;
  end_time: Timestamp | null;
  job_pid: number | null;
  jobid: Int8 | null;
  return_message: string | null;
  runid: Generated<Int8>;
  start_time: Timestamp | null;
  status: string | null;
  username: string | null;
}

export interface Footnote {
  author_id: string;
  content: string;
  phrase_id: number;
  timestamp: Timestamp;
}

export interface Gloss {
  gloss: string | null;
  phrase_id: number;
  source: GlossSource | null;
  state: Generated<GlossState>;
  updated_at: Timestamp;
  updated_by: string | null;
}

export interface GlossHistory {
  gloss: string | null;
  id: Generated<number>;
  phrase_id: number;
  source: GlossSource | null;
  state: GlossState | null;
  updated_at: Timestamp;
  updated_by: string | null;
}

export interface Job {
  created_at: Timestamp;
  data: Json | null;
  id: string;
  payload: Json | null;
  status: JobStatus;
  type_id: number;
  updated_at: Timestamp;
}

export interface JobType {
  id: Generated<number>;
  name: string | null;
}

export interface Language {
  code: string;
  font: Generated<string>;
  id: Generated<string>;
  name: string;
  reference_language_id: string | null;
  text_direction: Generated<TextDirection>;
  translation_ids: string[] | null;
}

export interface LanguageImportJob {
  end_date: Timestamp | null;
  language_id: string;
  start_date: Timestamp;
  succeeded: boolean | null;
  user_id: string | null;
}

export interface LanguageMemberRole {
  language_id: string;
  role: LanguageRole;
  user_id: string;
}

export interface Lemma {
  id: string;
}

export interface LemmaForm {
  grammar: string;
  id: string;
  lemma_id: string;
}

export interface LemmaFormSuggestion {
  count: number;
  form_id: string;
  gloss: string;
  id: Generated<number>;
  language_id: string;
}

export interface LemmaResource {
  content: string;
  lemma_id: string;
  resource_code: ResourceCode;
}

export interface MachineGloss {
  gloss: string | null;
  id: Generated<number>;
  language_id: string;
  model_id: number;
  updated_at: Timestamp | null;
  updated_by: string | null;
  word_id: string;
}

export interface MachineGlossHistory {
  gloss: string;
  id: Generated<number>;
  machine_gloss_id: number;
  updated_at: Timestamp | null;
  updated_by: string | null;
}

export interface MachineGlossModel {
  code: string;
  id: Generated<number>;
}

export interface Phrase {
  created_at: Timestamp;
  created_by: string | null;
  deleted_at: Timestamp | null;
  deleted_by: string | null;
  id: Generated<number>;
  language_id: string;
}

export interface PhraseWord {
  phrase_id: number;
  word_id: string;
}

export interface Recording {
  id: string;
  name: string;
}

export interface ResetPasswordToken {
  expires: Int8;
  token: string;
  user_id: string;
}

export interface Session {
  expires_at: Timestamp;
  id: string;
  user_id: string;
}

export interface TrackingEvent {
  created_at: Timestamp | null;
  data: Json;
  id: string;
  language_id: string | null;
  type: string;
  user_id: string | null;
}

export interface TranslatorNote {
  author_id: string;
  content: string;
  phrase_id: number;
  timestamp: Timestamp;
}

export interface UserEmailVerification {
  email: string;
  expires: Int8;
  token: string;
  user_id: string;
}

export interface UserInvitation {
  expires: Int8;
  token: string;
  user_id: string;
}

export interface User {
  email: string;
  email_status: Generated<EmailStatus>;
  hashed_password: string | null;
  id: Generated<string>;
  name: string | null;
  status: Generated<UserStatus>;
}

export interface UserSystemRole {
  role: SystemRole;
  user_id: string;
}

export interface Verse {
  book_id: number;
  chapter: number;
  id: string;
  number: number;
}

export interface VerseAudioTiming {
  end: number | null;
  id: Generated<number>;
  recording_id: string;
  start: number | null;
  verse_id: string;
}

export interface WeeklyContributionStatistic {
  approved_count: number;
  edited_approved_count: number;
  edited_unapproved_count: number;
  id: Generated<number>;
  language_id: string;
  revoked_count: number;
  user_id: string;
  week: Timestamp;
}

export interface WeeklyGlossStatistic {
  approved_count: number;
  book_id: number;
  id: Generated<number>;
  language_id: string;
  unapproved_count: number;
  user_id: string | null;
  week: Timestamp;
}

export interface Word {
  form_id: string;
  id: string;
  text: string;
  verse_id: string;
}

export interface DB {
  book: Book;
  "cron.job": CronJob;
  "cron.job_run_details": CronJobRunDetail;
  footnote: Footnote;
  gloss: Gloss;
  gloss_history: GlossHistory;
  job: Job;
  job_type: JobType;
  language: Language;
  language_import_job: LanguageImportJob;
  language_member_role: LanguageMemberRole;
  lemma: Lemma;
  lemma_form: LemmaForm;
  lemma_form_suggestion: LemmaFormSuggestion;
  lemma_resource: LemmaResource;
  machine_gloss: MachineGloss;
  machine_gloss_history: MachineGlossHistory;
  machine_gloss_model: MachineGlossModel;
  phrase: Phrase;
  phrase_word: PhraseWord;
  recording: Recording;
  reset_password_token: ResetPasswordToken;
  session: Session;
  tracking_event: TrackingEvent;
  translator_note: TranslatorNote;
  user_email_verification: UserEmailVerification;
  user_invitation: UserInvitation;
  user_system_role: UserSystemRole;
  users: User;
  verse: Verse;
  verse_audio_timing: VerseAudioTiming;
  weekly_contribution_statistics: WeeklyContributionStatistic;
  weekly_gloss_statistics: WeeklyGlossStatistic;
  word: Word;
}
